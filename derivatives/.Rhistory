# Add points from main data
geom_point(data = data,
aes(x = thinning_rate, y = stimulation_benefit, size = baseline_thickness),
color = "#3498db", alpha = 0.7) +
# Add vertical line at critical threshold
geom_vline(xintercept = threshold, linetype = "dashed",
color = "darkred", alpha = 0.5, size = 1) +
# Add annotation for critical period
annotate("text", x = -2.25, y = 0.14,
label = "Critical\nThreshold",
size = 4, fontface = "bold", color = "darkred") +
# Size scale with continuous gradient
scale_size_continuous(range = c(2, 6),
name = "Baseline\nThickness (mm)",
limits = c(2.0, 3.0),
breaks = seq(2.0, 3.0, 0.25)) +
# Labels
labs(x = "Annual Cortical Thinning Rate (%/year)",
y = "Stimulation Benefit\n(Composite Δ Learning)",
title = "Critical Threshold for Treatment Response") +
# Theme
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.position = "right",
panel.grid.minor = element_blank(),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
) +
xlim(-2.5, 0) +
ylim(-0.01, 0.15)
# Add overall title and caption
final_plot <- grid.arrange(
p_main,
top = grid::textGrob("Longitudinal Brain Changes Predict Treatment Response\nSimulated Data - Hypothetical Results",
gp = grid::gpar(fontsize = 18, fontface = "bold")),
bottom = grid::textGrob("Note: Hypothetical data for illustration purposes. Exploratory analysis with n≈35",
gp = grid::gpar(fontsize = 10, fontface = "italic", col = "gray40"))
)
# Save
ggsave("H4_critical_threshold.png", final_plot, width = 10, height = 8, dpi = 300)
# Print summary statistics
cat("\nSummary Statistics:\n")
cat("Sample size:", nrow(data), "\n")
cat("Thinning rate: Mean =", round(mean(data$thinning_rate), 2),
"SD =", round(sd(data$thinning_rate), 2), "%/year\n")
cat("Stimulation benefit: Mean =", round(mean(data$stimulation_benefit), 3),
"SD =", round(sd(data$stimulation_benefit), 3), "\n")
cat("Critical threshold at:", threshold, "%/year\n")
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
# Set seed for reproducibility
set.seed(789)
# Generate simulated data
n <- 35  # Smaller sample for longitudinal subset
# Baseline thickness
baseline_thickness <- rnorm(n, mean = 2.5, sd = 0.3)
baseline_thickness <- pmax(1.8, pmin(3.2, baseline_thickness))
# Annual cortical thinning rate - correlated with baseline
baseline_effect <- -2.5 * (baseline_thickness - 2.5) / 0.3  # Standardized
thinning_rate <- -1.5 + baseline_effect + rnorm(n, 0, 0.3)
thinning_rate <- pmax(-2.5, pmin(-0.1, thinning_rate))
# Create smooth concave curve using a logistic function
# This creates a smooth S-curve that's concave in the region of interest
midpoint <- -1.5  # Where the curve transitions
steepness <- 3    # Controls smoothness of transition
# Calculate base benefit with smooth logistic curve
base_benefit <- 0.12 / (1 + exp(-steepness * (thinning_rate - midpoint)))
# Add noise and ensure positive values
stimulation_benefit <- base_benefit + rnorm(n, 0, 0.02)
stimulation_benefit <- pmax(0, pmin(0.15, stimulation_benefit))
# Create dataframe
data <- data.frame(
thinning_rate = thinning_rate,
stimulation_benefit = stimulation_benefit,
baseline_thickness = baseline_thickness
)
# Create smooth curve data for plotting
curve_data <- data.frame(
x = seq(-2.5, 0, 0.01)
)
# Smooth logistic curve
curve_data$y <- 0.12 / (1 + exp(-steepness * (curve_data$x - midpoint)))
# Create the main plot
p_main <- ggplot() +  # Empty ggplot
# Add shaded critical period
annotate("rect", xmin = -2.5, xmax = -2, ymin = -Inf, ymax = Inf,
alpha = 0.1, fill = "red") +
# Add smooth curve - now with gray confidence band
geom_smooth(data = curve_data, aes(x = x, y = y),
method = "loess", span = 0.3,
color = "black", fill = "gray", alpha = 0.2, size = 1.2) +
# Add points from main data
geom_point(data = data,
aes(x = thinning_rate, y = stimulation_benefit, size = baseline_thickness),
color = "#3498db", alpha = 0.7) +
# Add vertical line at critical threshold
geom_vline(xintercept = -2, linetype = "dashed",
color = "darkred", alpha = 0.5, size = 1) +
# Add annotation for critical period
annotate("text", x = -2.25, y = 0.13,
label = "Critical\nThreshold",
size = 4, fontface = "bold", color = "darkred") +
# Size scale with continuous gradient
scale_size_continuous(range = c(2, 6),
name = "Baseline\nThickness (mm)",
limits = c(2.0, 3.0),
breaks = seq(2.0, 3.0, 0.25)) +
# Labels
labs(x = "Annual Cortical Thinning Rate (%/year)",
y = "Stimulation Benefit\n(Composite Δ Learning)",
title = "Critical Threshold for Treatment Response") +
# Theme
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.position = "right",
panel.grid.minor = element_blank(),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
) +
xlim(-2.5, 0) +
ylim(-0.01, 0.15)
# Add overall title and caption
final_plot <- grid.arrange(
p_main,
top = grid::textGrob("Longitudinal Brain Changes Predict Treatment Response\nSimulated Data - Hypothetical Results",
gp = grid::gpar(fontsize = 18, fontface = "bold")),
bottom = grid::textGrob("Note: Hypothetical data for illustration purposes. Exploratory analysis with n≈35",
gp = grid::gpar(fontsize = 10, fontface = "italic", col = "gray40"))
)
# Save
ggsave("H4_critical_threshold.png", final_plot, width = 10, height = 8, dpi = 300)
# Print summary statistics
cat("\nSummary Statistics:\n")
cat("Sample size:", nrow(data), "\n")
cat("Thinning rate: Mean =", round(mean(data$thinning_rate), 2),
"SD =", round(sd(data$thinning_rate), 2), "%/year\n")
cat("Stimulation benefit: Mean =", round(mean(data$stimulation_benefit), 3),
"SD =", round(sd(data$stimulation_benefit), 3), "\n")
cat("Critical threshold at: -2.0 %/year\n")
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
# Set seed for reproducibility
set.seed(789)
# Generate simulated data
n <- 35  # Smaller sample for longitudinal subset
# Baseline thickness
baseline_thickness <- rnorm(n, mean = 2.5, sd = 0.3)
baseline_thickness <- pmax(1.8, pmin(3.2, baseline_thickness))
# Annual cortical thinning rate - correlated with baseline
baseline_effect <- -2.5 * (baseline_thickness - 2.5) / 0.3  # Standardized
thinning_rate <- -1.5 + baseline_effect + rnorm(n, 0, 0.3)
thinning_rate <- pmax(-2.5, pmin(-0.1, thinning_rate))
# Create inverted U-shape with peak at -0.5% and accelerating drop after -2%
# Using a modified gaussian combined with exponential decay
peak_location <- -0.5
peak_height <- 0.12
width_before_critical <- 0.8  # Controls curve width before -2%
critical_point <- -2.0
drop_rate <- 3  # Controls how fast it drops after critical point
# Calculate base benefit with inverted U shape
base_benefit <- numeric(length(thinning_rate))
for (i in 1:length(thinning_rate)) {
if (thinning_rate[i] >= critical_point) {
# Before critical point: inverted parabola centered at peak_location
base_benefit[i] <- peak_height - 0.02 * ((thinning_rate[i] - peak_location)^2)
} else {
# After critical point: steeper exponential drop
value_at_critical <- peak_height - 0.02 * ((critical_point - peak_location)^2)
base_benefit[i] <- value_at_critical * exp(drop_rate * (thinning_rate[i] - critical_point))
}
}
# Add noise and ensure positive values
stimulation_benefit <- base_benefit + rnorm(n, 0, 0.015)
stimulation_benefit <- pmax(0, pmin(0.15, stimulation_benefit))
# Create dataframe
data <- data.frame(
thinning_rate = thinning_rate,
stimulation_benefit = stimulation_benefit,
baseline_thickness = baseline_thickness
)
# Create smooth curve data for plotting
curve_data <- data.frame(
x = seq(-2.5, 0, 0.01)
)
# Calculate y values for smooth curve
curve_data$y <- numeric(nrow(curve_data))
for (i in 1:nrow(curve_data)) {
if (curve_data$x[i] >= critical_point) {
# Before critical point: inverted parabola
curve_data$y[i] <- peak_height - 0.02 * ((curve_data$x[i] - peak_location)^2)
} else {
# After critical point: exponential drop with smooth transition
value_at_critical <- peak_height - 0.02 * ((critical_point - peak_location)^2)
# Smooth transition using a blending function
blend_zone <- 0.2  # Width of transition zone
if (curve_data$x[i] > (critical_point - blend_zone)) {
# Blend between parabola and exponential
t <- (critical_point - curve_data$x[i]) / blend_zone
parabola_value <- peak_height - 0.02 * ((curve_data$x[i] - peak_location)^2)
exp_value <- value_at_critical * exp(drop_rate * (curve_data$x[i] - critical_point))
curve_data$y[i] <- (1 - t) * parabola_value + t * exp_value
} else {
curve_data$y[i] <- value_at_critical * exp(drop_rate * (curve_data$x[i] - critical_point))
}
}
}
# Create the main plot
p_main <- ggplot() +
# Add shaded critical period
annotate("rect", xmin = -2.5, xmax = -2, ymin = -Inf, ymax = Inf,
alpha = 0.1, fill = "red") +
# Add smooth curve as a line
geom_line(data = curve_data, aes(x = x, y = y),
color = "black", size = 1.5, alpha = 0.9) +
# Add gray confidence band manually
geom_ribbon(data = curve_data,
aes(x = x, ymin = pmax(0, y - 0.015), ymax = y + 0.015),
alpha = 0.2, fill = "gray") +
# Add points from main data
geom_point(data = data,
aes(x = thinning_rate, y = stimulation_benefit, size = baseline_thickness),
color = "#3498db", alpha = 0.7) +
# Add vertical line at critical threshold
geom_vline(xintercept = -2, linetype = "dashed",
color = "darkred", alpha = 0.5, size = 1) +
# Add annotation for critical period
annotate("text", x = -2.25, y = 0.12,
label = "Critical\nThreshold",
size = 4, fontface = "bold", color = "darkred") +
# Size scale with continuous gradient
scale_size_continuous(range = c(2, 6),
name = "Baseline\nThickness (mm)",
limits = c(2.0, 3.0),
breaks = seq(2.0, 3.0, 0.25)) +
# Labels
labs(x = "Annual Cortical Thinning Rate (%/year)",
y = "Stimulation Benefit\n(Composite Δ Learning)",
title = "Optimal Window for Treatment Response") +
# Theme
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.position = "right",
panel.grid.minor = element_blank(),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
) +
xlim(-2.5, 0) +
ylim(-0.01, 0.15)
# Add overall title and caption
final_plot <- grid.arrange(
p_main,
top = grid::textGrob("Longitudinal Brain Changes Predict Treatment Response\nSimulated Data - Hypothetical Results",
gp = grid::gpar(fontsize = 18, fontface = "bold")),
bottom = grid::textGrob("Note: Hypothetical data for illustration purposes. Exploratory analysis with n≈35",
gp = grid::gpar(fontsize = 10, fontface = "italic", col = "gray40"))
)
# Save
ggsave("H4_critical_threshold.png", final_plot, width = 10, height = 8, dpi = 300)
# Print summary statistics
cat("\nSummary Statistics:\n")
cat("Sample size:", nrow(data), "\n")
cat("Thinning rate: Mean =", round(mean(data$thinning_rate), 2),
"SD =", round(sd(data$thinning_rate), 2), "%/year\n")
cat("Stimulation benefit: Mean =", round(mean(data$stimulation_benefit), 3),
"SD =", round(sd(data$stimulation_benefit), 3), "\n")
cat("Peak benefit at:", peak_location, "%/year\n")
cat("Critical threshold at: -2.0 %/year\n")
#~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~
# H4: longitudinal: tACS and cortical thickness
#~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
# Set seed for reproducibility
set.seed(789)
# Generate simulated data
n <- 35  # Smaller sample for longitudinal subset
# Baseline thickness - we'll use this to influence thinning rate
baseline_thickness <- rnorm(n, mean = 2.5, sd = 0.3)
baseline_thickness <- pmax(1.8, pmin(3.2, baseline_thickness))
# Annual cortical thinning rate - higher baseline thickness clusters near 0
# Create a bimodal distribution
thinning_rate <- numeric(n)
for (i in 1:n) {
if (baseline_thickness[i] > 2.6) {
# Thicker cortex - cluster near minimal thinning
thinning_rate[i] <- -runif(1, min = 0.1, max = 1.0)
} else if (baseline_thickness[i] < 2.3) {
# Thinner cortex - more spread out, faster thinning
thinning_rate[i] <- -runif(1, min = 1.5, max = 2.5)
} else {
# Medium thickness - spread across range
thinning_rate[i] <- -runif(1, min = 0.5, max = 2.0)
}
}
# Add some noise
thinning_rate <- thinning_rate + rnorm(n, 0, 0.2)
thinning_rate <- pmax(-2.5, pmin(-0.1, thinning_rate))
# Create simple inverted parabola
# Vertex at (-0.5, 0.12)
vertex_x <- -0.5
vertex_y <- 0.12
a <- -0.015  # Controls width of parabola
# Calculate base benefit with simple parabola: y = a(x - h)^2 + k
base_benefit <- a * (thinning_rate - vertex_x)^2 + vertex_y
# Add noise and ensure positive values
stimulation_benefit <- base_benefit + rnorm(n, 0, 0.015)
stimulation_benefit <- pmax(0, pmin(0.15, stimulation_benefit))
# Create dataframe
data <- data.frame(
thinning_rate = thinning_rate,
stimulation_benefit = stimulation_benefit,
baseline_thickness = baseline_thickness
)
# Create smooth curve data for plotting
curve_data <- data.frame(
x = seq(-2.5, 0, 0.01)
)
# Simple parabola equation
curve_data$y <- a * (curve_data$x - vertex_x)^2 + vertex_y
curve_data$y <- pmax(0, curve_data$y)  # Don't go below 0
# Create the main plot
p_main <- ggplot() +
# Add shaded critical period
annotate("rect", xmin = -2.5, xmax = -2, ymin = -Inf, ymax = Inf,
alpha = 0.1, fill = "red") +
# Add smooth parabola curve
geom_line(data = curve_data, aes(x = x, y = y),
color = "black", size = 1.5, alpha = 0.9) +
# Add gray confidence band
geom_ribbon(data = curve_data,
aes(x = x, ymin = pmax(0, y - 0.015), ymax = y + 0.015),
alpha = 0.2, fill = "gray") +
# Add points from main data
geom_point(data = data,
aes(x = thinning_rate, y = stimulation_benefit, size = baseline_thickness),
color = "#3498db", alpha = 0.7) +
# Add vertical line at critical threshold
geom_vline(xintercept = -2, linetype = "dashed",
color = "darkred", alpha = 0.5, size = 1) +
# Add annotation for critical period
annotate("text", x = -2.25, y = 0.08,
label = "Critical\nThreshold",
size = 4, fontface = "bold", color = "darkred") +
# Size scale with continuous gradient
scale_size_continuous(range = c(2, 6),
name = "Baseline\nThickness (mm)",
limits = c(2.0, 3.0),
breaks = seq(2.0, 3.0, 0.25)) +
# Labels
labs(x = "Annual Cortical Thinning Rate (%/year)",
y = "Stimulation Benefit\n(Composite Δ Learning)",
title = "Optimal Window for Treatment Response") +
# Theme
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.position = "right",
panel.grid.minor = element_blank(),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
) +
xlim(-2.5, 0) +
ylim(-0.01, 0.15)
# Add overall title and caption
final_plot <- grid.arrange(
p_main,
top = grid::textGrob("Longitudinal Brain Changes Predict Treatment Response\nSimulated Data - Hypothetical Results",
gp = grid::gpar(fontsize = 18, fontface = "bold")),
bottom = grid::textGrob("Note: Hypothetical data for illustration purposes. Exploratory analysis with n≈35",
gp = grid::gpar(fontsize = 10, fontface = "italic", col = "gray40"))
)
# Save
ggsave("H4_critical_threshold.png", final_plot, width = 10, height = 8, dpi = 300)
# Print summary statistics
cat("\nSummary Statistics:\n")
cat("Sample size:", nrow(data), "\n")
cat("Thinning rate: Mean =", round(mean(data$thinning_rate), 2),
"SD =", round(sd(data$thinning_rate), 2), "%/year\n")
cat("Stimulation benefit: Mean =", round(mean(data$stimulation_benefit), 3),
"SD =", round(sd(data$stimulation_benefit), 3), "\n")
cat("Peak benefit at:", vertex_x, "%/year\n")
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
# Set seed for reproducibility
set.seed(789)
# Generate simulated data
n <- 35  # Smaller sample for longitudinal subset
# Baseline thickness
baseline_thickness <- rnorm(n, mean = 2.5, sd = 0.3)
baseline_thickness <- pmax(1.8, pmin(3.2, baseline_thickness))
# Annual cortical thinning rate - most clustered between -1 and 0
# Create more realistic distribution
thinning_rate <- numeric(n)
# 70% of data between -1 and 0
n_clustered <- round(0.7 * n)
# 30% spread out more
n_spread <- n - n_clustered
# Clustered group (majority)
thinning_rate[1:n_clustered] <- -runif(n_clustered, min = 0.1, max = 1.0)
# Spread group (minority)
thinning_rate[(n_clustered+1):n] <- -runif(n_spread, min = 1.0, max = 2.5)
# Add noise and shuffle
thinning_rate <- thinning_rate + rnorm(n, 0, 0.15)
thinning_rate <- pmax(-2.5, pmin(-0.1, thinning_rate))
# Shuffle to mix groups
shuffle_idx <- sample(1:n)
thinning_rate <- thinning_rate[shuffle_idx]
baseline_thickness <- baseline_thickness[shuffle_idx]
# Create more extreme inverted parabola
# Vertex at (-0.5, 0.13)
vertex_x <- -0.5
vertex_y <- 0.13
a <- -0.03  # More negative = more extreme curve
# Calculate base benefit with parabola
base_benefit <- a * (thinning_rate - vertex_x)^2 + vertex_y
# Add noise and ensure positive values
stimulation_benefit <- base_benefit + rnorm(n, 0, 0.015)
stimulation_benefit <- pmax(0, pmin(0.15, stimulation_benefit))
# Create dataframe
data <- data.frame(
thinning_rate = thinning_rate,
stimulation_benefit = stimulation_benefit,
baseline_thickness = baseline_thickness
)
# Create smooth curve data for plotting
curve_data <- data.frame(
x = seq(-2.5, 0, 0.01)
)
# Simple parabola equation with more extreme curve
curve_data$y <- a * (curve_data$x - vertex_x)^2 + vertex_y
curve_data$y <- pmax(0, curve_data$y)  # Don't go below 0
# Create the main plot
p_main <- ggplot() +
# Add shaded critical period
annotate("rect", xmin = -2.5, xmax = -2, ymin = -Inf, ymax = Inf,
alpha = 0.1, fill = "red") +
# Add smooth parabola curve
geom_line(data = curve_data, aes(x = x, y = y),
color = "black", size = 1.5, alpha = 0.9) +
# Add gray confidence band
geom_ribbon(data = curve_data,
aes(x = x, ymin = pmax(0, y - 0.015), ymax = y + 0.015),
alpha = 0.2, fill = "gray") +
# Add points from main data
geom_point(data = data,
aes(x = thinning_rate, y = stimulation_benefit, size = baseline_thickness),
color = "#3498db", alpha = 0.7) +
# Add vertical line at critical threshold
geom_vline(xintercept = -2, linetype = "dashed",
color = "darkred", alpha = 0.5, size = 1) +
# Add annotation for critical period
annotate("text", x = -2.25, y = 0.05,
label = "Critical\nThreshold",
size = 4, fontface = "bold", color = "darkred") +
# Size scale with continuous gradient
scale_size_continuous(range = c(2, 6),
name = "Baseline\nThickness (mm)",
limits = c(2.0, 3.0),
breaks = seq(2.0, 3.0, 0.25)) +
# Labels
labs(x = "Annual Cortical Thinning Rate (%/year)",
y = "Stimulation Benefit\n(Composite Δ Learning)",
title = "Optimal Window for Treatment Response") +
# Theme
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.position = "right",
panel.grid.minor = element_blank(),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
) +
xlim(-2.5, 0) +
ylim(-0.01, 0.15)
# Add overall title and caption
final_plot <- grid.arrange(
p_main,
top = grid::textGrob("Longitudinal Brain Changes Predict Treatment Response\nSimulated Data - Hypothetical Results",
gp = grid::gpar(fontsize = 18, fontface = "bold")),
bottom = grid::textGrob("Note: Hypothetical data for illustration purposes. Exploratory analysis with n≈35",
gp = grid::gpar(fontsize = 10, fontface = "italic", col = "gray40"))
)
# Save
ggsave("H4_critical_threshold.png", final_plot, width = 10, height = 8, dpi = 300)
# Print summary statistics
cat("\nSummary Statistics:\n")
cat("Sample size:", nrow(data), "\n")
cat("Data between -1 and 0:", sum(data$thinning_rate >= -1), "subjects (",
round(100*sum(data$thinning_rate >= -1)/n), "%)\n")
cat("Thinning rate: Mean =", round(mean(data$thinning_rate), 2),
"SD =", round(sd(data$thinning_rate), 2), "%/year\n")
cat("Stimulation benefit: Mean =", round(mean(data$stimulation_benefit), 3),
"SD =", round(sd(data$stimulation_benefit), 3), "\n")
